# Docker Compose configuration for Pokemon Collector Backend
# Generated by Ansible - provides MongoDB and Flask API services

version: '3.8'

services:
  mongodb:
    image: mongo:6.0
    container_name: pokeapi_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-pokeapi_secure_password}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-pokeapi}
    ports:
      - "{{ mongodb_port }}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    networks:
      - pokeapi_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  flask_api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: pokeapi_flask_api
    restart: unless-stopped
    environment:
      FLASK_ENV: ${FLASK_ENV:-production}
      FLASK_HOST: 0.0.0.0
      FLASK_PORT: {{ flask_api_port }}
      MONGODB_URI: mongodb://admin:${MONGO_ROOT_PASSWORD:-pokeapi_secure_password}@mongodb:27017/pokeapi?authSource=admin
      MONGODB_DB: ${MONGO_DB:-pokeapi}
      DEPLOYMENT_METHOD: ansible
    ports:
      - "{{ flask_api_port }}:{{ flask_api_port }}"
    volumes:
      - ./logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - pokeapi_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:{{ flask_api_port }}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mongodb_data:
    driver: local

networks:
  pokeapi_network:
    driver: bridge
