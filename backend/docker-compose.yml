# =============================================================================
# PokeAPI Backend - Multi-Environment Docker Compose Configuration
# =============================================================================
# Supports: development, production, testing environments
# Usage:
#   Development: docker-compose up
#   Production:  docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
#   Testing:     docker-compose -f docker-compose.yml -f docker-compose.test.yml up

version: "3.8"

# =============================================================================
# Services Configuration
# =============================================================================
services:
  # ---------------------------------------------------------------------------
  # MongoDB Database Service
  # ---------------------------------------------------------------------------
  mongodb:
    image: mongo:7.0
    container_name: pokeapi_mongodb_${ENVIRONMENT:-dev}
    restart: unless-stopped

    # Environment configuration
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-pokeapi_game}

    # Port mapping (configurable)
    ports:
      - "${MONGO_PORT:-27017}:27017"

    # Persistent data storage
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongo-init:/docker-entrypoint-initdb.d:ro

    # Resource limits for production stability
    deploy:
      resources:
        limits:
          memory: ${MONGO_MEMORY_LIMIT:-512M}
          cpus: "${MONGO_CPU_LIMIT:-0.5}"
        reservations:
          memory: ${MONGO_MEMORY_RESERVATION:-256M}
          cpus: "${MONGO_CPU_RESERVATION:-0.25}"

    # Health check
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Network configuration
    networks:
      - pokeapi_network

  # ---------------------------------------------------------------------------
  # Flask API Service
  # ---------------------------------------------------------------------------
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        BUILD_ENV: ${BUILD_ENV:-production}
        APP_PORT: ${API_PORT:-5000}
        WORKERS: ${API_WORKERS:-4}
        WORKER_TIMEOUT: ${API_WORKER_TIMEOUT:-60}
        KEEP_ALIVE: ${API_KEEP_ALIVE:-2}
        MAX_REQUESTS: ${API_MAX_REQUESTS:-1000}
        MAX_REQUESTS_JITTER: ${API_MAX_REQUESTS_JITTER:-100}

    container_name: pokeapi_api_${ENVIRONMENT:-dev}
    restart: unless-stopped

    # Environment configuration
    environment:
      # Flask configuration
      FLASK_ENV: ${FLASK_ENV:-production}
      FLASK_DEBUG: ${FLASK_DEBUG:-0}

      # Database configuration
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@mongodb:27017/${MONGO_DATABASE:-pokeapi_game}?authSource=admin
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_DB: ${MONGO_DATABASE:-pokeapi_game}
      MONGO_COLLECTION: ${MONGO_COLLECTION:-pokemon_collection}

      # API configuration
      PORT: ${API_PORT:-5000}
      API_HOST: ${API_HOST:-0.0.0.0}

      # External API configuration
      POKEAPI_BASE_URL: ${POKEAPI_BASE_URL:-https://pokeapi.co/api/v2}

      # Security configuration
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}

      # Logging configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

    # Port mapping
    ports:
      - "${API_PORT:-5000}:${API_PORT:-5000}"

    # Volume mounts for development and logs
    volumes:
      - ./logs:/app/logs
      - ${SOURCE_MOUNT:-/dev/null}:/app/src:ro # For development hot reload

    # Service dependencies
    depends_on:
      mongodb:
        condition: service_healthy

    # Resource limits
    deploy:
      resources:
        limits:
          memory: ${API_MEMORY_LIMIT:-256M}
          cpus: "${API_CPU_LIMIT:-0.5}"
        reservations:
          memory: ${API_MEMORY_RESERVATION:-128M}
          cpus: "${API_CPU_RESERVATION:-0.25}"

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT:-5000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    # Network configuration
    networks:
      - pokeapi_network

# =============================================================================
# Volume Definitions
# =============================================================================
volumes:
  # Persistent MongoDB data
  mongodb_data:
    driver: local
    name: pokeapi_mongodb_data_${ENVIRONMENT:-dev}

  # MongoDB configuration
  mongodb_config:
    driver: local
    name: pokeapi_mongodb_config_${ENVIRONMENT:-dev}

# =============================================================================
# Network Configuration
# =============================================================================
networks:
  pokeapi_network:
    driver: bridge
    name: pokeapi_network_${ENVIRONMENT:-dev}
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}
